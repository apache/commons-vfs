/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Building Apache Commons VFS
  
To build Apache Commons VFS, you need a JDK at version 8 or greater, and Apache Maven 3.2.5 or greater.

To perform the Release Audit which validate license headers (the "RAT" check), run:

mvn apache-rat:check

You can also use the default goal to perform all validations that are know to pass:

mvn

The Maven profile test-deploy is used for testing, a release manager will omit it when it is time to create a 
release candidate.

Build and install all jar files: 
mvn -V -Ptest-deploy -Prelease clean install -DskipTests

Validate all installed jar files and build all module sites:
mvn -V -Ptest-deploy -Prelease -P japicmp -P jacoco site

Deploy the jar files:
mvn -V -Ptest-deploy -Prelease deploy

Assemble all sites into one:
mvn -V -Ptest-deploy -Prelease site:stage

Testing
-------

Apache Commons VFS uses JUnit 5 (Jupiter) for testing, with JUnit Vintage engine for backward
compatibility with legacy JUnit 3 test suites.

Run all tests:
mvn test

Run tests for a specific module:
mvn test -pl commons-vfs2

Run a specific test class:
mvn test -Dtest=StandardFileSystemManagerTest

Test Architecture:
- Standalone tests use JUnit 5 (@Test, @BeforeEach, @AfterEach)
- Provider tests use a hybrid JUnit 3/5 approach for compatibility
- Test suites are discovered via JUnit Vintage engine
- Total test count: 3122+ tests across all providers

For more information on the JUnit 5 migration, see:
- JUNIT5_MIGRATION_PROGRESS.md - Current migration status
- JUNIT5_MIGRATION_PHASE3B_PLAN.md - Future migration plans
- JUNIT5_MIGRATION_INDEX.md - Complete migration documentation index
